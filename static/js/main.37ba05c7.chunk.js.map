{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newTextUp","toUpperCase","showAlert","newTextLo","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","spacesText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.37ba05c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/About\">{props.aboutText}</Link> */}\r\n            </li>\r\n          </ul>\r\n         \r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n         <div className={`form-check form-switch text-${props.mode === `light`?`dark`:`light`}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode}   id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n};\r\nNavbar.defaultProps = {\r\n  title: 'Set title text here',\r\n  aboutText: 'About us'\r\n};\r\n\r\n\r\n","import React,{ useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n        \r\n    }\r\n\r\n    const handleUpClick = ()=>{\r\n        let newTextUp=text.toUpperCase();\r\n        setText(newTextUp);\r\n        props.showAlert(\"Coverted to uppercase\",\"success\");\r\n        \r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newTextLo=text.toLowerCase();\r\n        setText(newTextLo);\r\n        props.showAlert(\"Coverted to LowerCase\",\"success\");\r\n        \r\n    }\r\n    const handleCTClick = ()=>{\r\n        let newTextLo=\"\";\r\n        setText(newTextLo);\r\n        props.showAlert(\"Coverted to Clear Text\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        let copyText =document.getElementById(\"myBox\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Copy text\",\"success\");\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let spacesText = text.split(/[ ]+/);\r\n        setText(spacesText.join(\" \"));\r\n        props.showAlert(\"Remove Extra Spaces\",\"success\");\r\n    }\r\n    const [text,setText] = useState(\"\"); \r\n    return (  \r\n       <>\r\n            <div className=\"container\" style={{color:props.mode === `light`?`#0f0640`:`white`}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === `light`?`white`:`grey`,color:props.mode === `light`?`#0f0640`:`white`}} id=\"myBox\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-outline-${props.mode !== `light`?`light`:`primary`} mx-1 my-2`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className={`btn btn-outline-${props.mode !== `light`?`light`:`primary`} mx-1 my-2` } onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className={`btn btn-outline-${props.mode !== `light`?`light`:`primary`} mx-1 my-2`} onClick={handleCTClick}>Clear Text</button>\r\n                <button className={`btn btn-outline-${props.mode !== `light`?`light`:`primary`} mx-1 my-2`} onClick={handleCopy}>Copy Text</button>\r\n                <button className={`btn btn-outline-${props.mode !== `light`?`light`:`primary`} mx-1 my-2`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n       \r\n            </div>\r\n            <div className=\"containe my-3\" style={{color:props.mode === `light`?`#0f0640`:`white`}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length - 1} words and {text.length} characters</p>\r\n                <p>{text.split(\" \").length * 0.008 - 0.008} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong> {capitalize(props.alert.type)} </strong>:{props.alert.msg}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport './components/Navbar';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\n// import TodoList from './components/TodoList/TodoList'\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#0f0640';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = '#9cd8ed';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n\n  }\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <Navbar title=\"textUttam\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes> */}\n          {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyes below\" mode={mode} />}></Route> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyes below\" mode={mode} />\n          {/* <Route exact path=\"About/\" element={<About />}/>\n          </Routes> */}\n          {/* <TodoList /> */}\n        </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}